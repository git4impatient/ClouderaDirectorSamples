
#
# Copyright (c) 2014 Cloudera, Inc. All rights reserved.
#

#
# Simple AWS Cloudera Director configuration file with automatic role assignments
# that works as expected if you use a single instance type for all cluster nodes
#

#
# Cluster name
#

name: restartable

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#

provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.
    #
    # Not needed when running on an instance launched with an IAM role.
    accessKeyId: ${?AWS_ACCESS_KEY_ID}
    secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    region: us-east-1
    subnetId: ${?subnetId}
    securityGroupsIds: ${?securityGroupsIds}


#     accessKeyId: ${?AWS_ACCESS_KEY_ID}
#     secretAccessKey: ${?AWS_SECRET_ACCESS_KEY}

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

#    region: region-REPLACE-ME
#    region: us-east-1

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    #subnetId: subnet-REPLACE-ME
#    subnetId: subnet-740e482e

    #
    # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #

    #securityGroupsIds: sg-REPLACE-ME
#    securityGroupsIds: sg-2b2dab5b

    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: cloudera-director

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    # rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    # rootVolumeType: gp2 # OR standard (for EBS magnetic)

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT (public subnet type of setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

     associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: centos # for RHEL image
    #privateKey: REPLACE-ME # with an absolute path to .pem file
    #privateKey: /home/centos/directorV2.pem
    privateKey: ${?path2privateKey}
}

#
# A list of instance types to use for group of nodes or management services
#

instances {

    adminnode {
        type: m4.2xlarge   # requires an HVM AMI
	 ebsVolumeCount : 1
        ebsVolumeType: sc1 # specify either st1, sc1 or gp2 volume type
        ebsVolumeSizeGiB: 900

        #image: ami-HVM-REPLACE-ME
        image: ami-6d1c2007

        #
        # Name of the IAM Role to use for this instance type
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
        #

        # iamProfileName: iam-profile-REPLACE-ME

        tags {
            owner: ${?USER}
        }

        bootstrapScript: """#!/bin/sh

# This is an embedded bootstrap script that runs as root and can be used to customize
# the instances immediately after boot and before any other Cloudera Director action

# If the exit code is not zero Cloudera Director will automatically retry

echo 'Hello World!'
exit 0

"""

        #
        # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
        # bootstrap script will take care of normalization. This is an advanced configuration that will require
        # assistance from Cloudera support.
        #
        # Normalization includes:
        #   downloading and installing packages
        #   minimizing swappiness
        #   increasing the maximun number of open files
        #   mounting ephemeral disks
        #   resizing the root partition.
        #
        # Defaults to true
        #

        # normalizeInstance: true

    }

    datanode {
        type: m4.2xlarge
        #image: ami-HVM-REPLACE-ME
        image: ami-6d1c2007
        ebsVolumeCount : 4
        ebsVolumeType: sc1 # specify either st1, sc1 or gp2 volume type
        ebsVolumeSizeGiB: 900


        tags {
            owner: ${?USER}
        }
    }
}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.adminnode} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

}

#
# Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: 5 # includes Impala and Spark
    }

    services: [HDFS, YARN, ZOOKEEPER, HBASE, HIVE, OOZIE, HUE,  IMPALA, SPARK_ON_YARN]

    nodes {
        count: 4
        instance: ${instances.datanode}
    }

    postCreateScripts: ["""#!/bin/sh

# This is an embedded post creation script script that runs as root and can be used to
# customize the cluster after it has been created.

# If the exit code is not zero Cloudera Director will fail

echo 'Hello World!'
exit 0
    """,
    """#!/bin/bash

# Additionally, multiple post creation scripts can be supplied.  They will run in the
# order they are listed here.
# 
#
# Additionally, multiple post creation scripts can be supplied.  They will run in the
# order they are listed here.

sudo su - hdfs -c 'hadoop fs -mkdir /user/centos'
sudo su - hdfs -c 'hadoop fs -chown centos:centos /user/centos'

# copyright 2016 (c) Martin Lurie
# sample code - not supported
#
# RESET
sudo su - centos -c "impala-shell  -i $(hostname):21000 <<eoj
drop table if exists inpatient;
drop table if exists inpatientsnappyparquet;
eoj"

sudo su - centos -c "hadoop fs -rm -r inpatient"
sudo su - centos -c "rm Inpatient_Data_2012_CSV.zip"
sudo su - centos -c "rm Medicare_Hospital_Inpatient_PUF_Methodology_2014-05-30.pdf"
sudo su - centos -c "rm Medicare_Provider_Charge_Inpatient_DRG100_FY2012.csv"

# RUN DEMO 

sudo su - centos -c "wget https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Provider-Charge-Data/Downloads/Inpatient_Data_2012_CSV.zip"
sudo su - centos -c "unzip Inpatient_Data_2012_CSV.zip "
sudo su - centos -c "head Medicare_Provider_Charge_Inpatient_DRG100_FY2012.csv"
sudo su - centos -c "hadoop fs -mkdir inpatient"
sudo su - centos -c "hadoop fs -put Medicare_Provider_Charge_Inpatient_DRG100_FY2012.csv inpatient"
#
# DRG Definition,Provider Id,Provider Name,Provider Street Address,Provider City,Provider State,Provider Zip Code,Hospital Referral Region (HRR) Description,Total Discharges,Average Covered Charges,Average Total Payments,Average Medicare Payments
# 039 - EXTRACRANIAL PROCEDURES W/O CC/MCC,10001,SOUTHEAST ALABAMA MEDICAL CENTER,1108 ROSS CLARK CIRCLE,DOTHAN,AL,36301,AL - Dothan,95,37467.95789,5525.673684,4485.873684
# yes, there are some bad rows with too many commas

sudo su - centos -c "impala-shell  -i $(hostname):21000  <<eoj
drop table if exists inpatient;
create external table inpatient (
DRGDefinition string,
ProviderId string,
ProviderName string,
ProviderStreetAddress string,
ProviderCity string,
ProviderState string,
ProviderZipCode string,
HospitalReferralRegionHRRDescription string,
TotalDischarges decimal(12,5),
AverageCoveredCharges decimal(12,6),
AverageTotalPayments decimal(12,6),
AverageMedicarePayments decimal(12,6)
)
COMMENT 'source https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Medicare-Provider-Charge-Data/Inpatient2012.html'
ROW FORMAT DELIMITED 
  FIELDS TERMINATED BY ',' 
LOCATION
  '/user/centos/inpatient'
;

select count(*) from inpatient;
select * from inpatient limit 5;

drop table if exists inpatientsnappyparquet;
create table inpatientsnappyparquet as select * from inpatient;
compute stats inpatientsnappyparquet;
select sum( AverageCoveredCharges) , sum (AverageTotalPayments) , sum ( AverageMedicarePayments) from inpatientsnappyparquet;


eoj"




echo "this script ran as user $(id)"

exit 0
    """]
}
